<?php
if(SIMPLESITE!=1)
	die("Can't access this file directly.");
class SimpleSiteInstaller extends SimpleModule
{
	public static $info=array(  "author"  => "Jon Stockton",
				    "name"=> "SimpleSite Installer",
				    "version" => "0.1",
				    "date"=> "September 29, 2014"
	);

	public function isInstalled()
	{
		return true;
	}
	public function install()
	{
		return true;
	}
	public function uninstall()
	{
		return true;
	}
	public function getContent($configs=array())
	{
		$configPage=$this->readTemplate($_SERVER['DOCUMENT_ROOT'].$configs["path"]["root"].$configs["path"]["mod_templates"]."/SimpleSiteInstaller.template","SimpleSiteInstaller");
		$content="";
		$configurationFile="";
		if(isset($_POST['uri_path']))
		{
			$testEnvTemplate=file_get_contents($_SERVER['DOCUMENT_ROOT'].$configs["path"]["root"].$configs["path"]["mod_templates"]."/SimpleSiteInstaller_testEnv.template");

			$configs=$configs;
			$configs['path']['root']="/".$_POST['uri_path'];
			$configs['database']['type']=$_POST['dbtype'];
			$configs['database']['user']=$_POST['dbuser'];
			$configs['database']['password']=$_POST['dbpass'];
			$configs['database']['host']=$_POST['dbhost'];
			$configs['database']['tbl_prefix']=$_POST['dbtblprefix'];

			$this->db=new SimpleDB($configs['database']);
			try
			{
				$this->db->connect();
			}
			catch(Exception $e)
			{
				SimpleDebug::logException($e);
				$content=adminCP::testEnvironment($testEnvTemplate, $configs);
				return $content.$configPage;
			}
			$content=adminCP::testEnvironment($testEnvTemplate, $configs);
			$configurationFile=$this->parseTemplate(base64_decode("", "SimpleSiteInstaller"));
		}
		if($_POST['dirty']=="true")
			$content.="<br/><br/><b>If you are sure that this is the configuration that you want to be set, copy and paste the text from below into the configuration file editor in adminCP:</b><br/><textarea>$configurationFile</textarea><br/><br/>";
		return $content.$configPage;
	}
}
?>
